<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<!-- 교재와 버전을 맞추기위해 2.6.7 사용 -->
		<version>2.6.7</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.arsyux</groupId>
	<artifactId>TheCar</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>TheCar</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		
		<!--
			JPA 라이브러리
			객체와 관계형 데이터베이스의 데이터를 자동으로 매핑해주는 ORM(Object Relational Mapping, 객체 관계 매핑)이
			마이바티스 같은 데이터 매퍼와 궁극적으로 다른 점은 애플리케이션에서 사용하는 SQL까지 제공한다는 것이다.
			따라서 ORM을 사용하면 직접 SQL을 관리하는데 사용했던 시간과 노력을 줄일 수 있다.
			JPA는 JDBC같은 API에 불과하기 때문에 데이터베이스 연동을 처리할 때 운영 과정에서 구현체를 쉽게 교체할 수 있다.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<!-- 마이바티스 라이브러리 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<!-- 교재와 버전을 맞추기위해 2.2.2 사용 -->
			<version>2.2.2</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
		<!-- 
			h2 Database 라이브러리
			메인 db작업 전에 테스트용으로 사용하기 좋아서 사용.
		-->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<!-- lombok 라이브러리 -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!--
			마이바티스(mybatis) 라이브러리
			JPA에 대한 수요가 점점 늘어나고는 있지만, 여전히 상당수의 애플리케이션은 마이바티스를 기반으로 데이터베이스 연동을 처리하고 있다.
		-->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter-test</artifactId>
			<!-- 교재와 버전을 맞추기위해 2.2.0 사용 -->
			<version>2.2.0</version>
			<scope>test</scope>
		</dependency>
		
		<!-- 
			JSTL 관련 라이브러리
			스프링 부트는 기본적으로 JSP 기반의 웹 애플리케이션 개발 환경을 지원하지않는다.
			따라서 spring-boot-starter-web이라는 스타터에는 JSP 관련 라이브러리들이 포함되어 있지 않음.
			프로젝트에서 JSP를 이용하기 위해서는 직접 라이브러리 의존성을 추가해야한다.
			jstl은 JSP파일에서 JSP 표준 태그 라이브러리(JSP Standard Tag Library, JSTL)를 사용하기 위해 필요하며,
			tomcat-embed-jasper는 JSP 파일을 서블릿(Servlet) 클래스로 변환할 때 사용한다.
		-->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		
		<!-- 부트스트랩 라이브러리 -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>5.1.3</version>
		</dependency>
		
		<!-- jQuery 라이브러리 -->
		<dependency>
			<groupId>org.webjars.bower</groupId>
			<artifactId>jquery</artifactId>
			<version>3.6.0</version>
		</dependency>
		
		<!-- Summernote 라이브러리 -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>summernote</artifactId>
			<version>0.8.10</version>
		</dependency>
		
		<!--
			validation 스타터
			회원 가입 화면이나 포스트 등록 화면에서 사용자가 아무런 값도 입력 하지 않고 등록 버튼을 클릭하면
			USERS 테이블이나 POST 테이블에는 빈 문자열("")이 저장된다.
			이러한 문제를 해결하기 위해 유효성 검사 라이브러리를 추가한다.
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		
		<!--
			ModelMapper 라이브러리 추가
			현재 이 프로그램은 엔티티 클래스를 이용하여 사용자가 입력한 값을 전달받고 있다.
			하지만 사용자 입력값을 받을 때는 엔티티가 아닌 DTO 클래스를 이용하는 것이 맞다.
			
			엔티티 클래스와 DTO 클래스의 차이점??
			JPA를 이용하여 실제 데이터베이스와 연동할 때는 당연히 엔티티를 이용한다.
			하지만 사용자가 입력한 값을 처리하거나 검색 결과를 화면으로 전달할 때는 DTO를 사용한다.
			즉, 일반 적인 경우라면 사용자가 입력한 값을 DTO 객체를 통해 받는다.
			그리고 비즈니스 메소드를 호출할 때 DTO 객체에 설정된 값을 엔티티에 복사하여 인자로 전달한다.
			
			이렇게 엔티티와 DTO 사이에서 멤버변수 값들을 수시로 복사하다 보면, 변수가 누락되기도 하고 개발자가 반복적으로 처리해야 할 부분이 생긴다.
			이러한 문제를 해결하기 위해 특정 자바 객체가 가진 멤버변수 값들을 원하는 객체의 멤버변수에 자동으로 매핑시켜 주는 ModelMapper라는 라이브러리를 사용한다.
		-->
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>2.3.9</version>
		</dependency>
		
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
