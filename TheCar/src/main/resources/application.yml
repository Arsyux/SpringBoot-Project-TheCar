# 스프링 부트 프로젝트에서 프로퍼티를 관리하는 방법은 2가지이다.
# 첫 번째는 .properties을 이용하는 것이고, 두 번째는 YAML 파일(.yml)을 이용하는 것이다.

# 웹 애플리케이션을 운용하기 위해서는 다양한 객체가 필요한데,
# 이는 개발자가 직접 작성한 객체와 프레임워크에서 제공하는 객체로 나뉜다.
# 스프링 부트에서는 객체를 자동으로 생성하고 관리하기 위해서 자동설정 클래스를 제공한다.
# Maven Dependencies의 spring-boot-autoconfigure-2.6.7.jar 파일안에는
# 수많은 자동설정 클래스가 등록되어 있다. 이러한 자동설정 클래스는 스프링 애플리케이션이 로딩되는 순간
# 자동으로 처리되어 여러 객체들을 생성한다.
# 이 중에서 웹 애플리케이션과 관련된 자동설정 클래스가 바로 WebMvcAutoConfiguration이다.
# 그중 InternalResourceViewResolver 객체를 생성하는 defaultViewResolver()라는 메소드가 있는데,
# defaultViewResolver() 메소드는 InternalResourceViewResolver 객체를 생성한 직후,
# mvcProperties를 이용하여 접두사(prefix)와 접미사(suffix)에 대한 의존성을 주입한다.

# 프로퍼티 파일 설정
# 서버 설정
# server.servlet.context-path=/으로 인해 서버 요청을 할 때 프로젝트 이름을 생략할 수 있다.
#server.port=8080
#server.servlet.context-path=/
#server.servlet.encoding.charset=UTF-8

# 뷰리졸버 설정
# WebMvcAutoConfiguration이라는 자동설정 클래스가 생성하는 InternalResourceViewResolver 객체의
# 접두사(prefix)와 접미사(suffix) 속성을 변경한다.
#spring.mvc.view.prefix=/WEB-INF/thecar/
#spring.mvc.view.suffix=.jsp

# YAML 파일 설정
# 확장자를 .properties에서 .yml로 변경한다.
# YAML 파일은 기존 프로퍼티 설정과 비교하여 중복 설정이 적고 가독성이 좋다.
# 들여쓰기는 space 2개를 사용한다.
# 서버 설정
server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8

# 뷰리졸버 설정
spring:
  mvc:
    view:
      prefix: /WEB-INF/thecar/
      suffix: .jsp
  # 데이터소스 설정
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:tcp://localhost/~/test
    username: sa
    password:
  # JPA설정
  # JPA에서는 하나의 엔티티를 검색할 때 연관관계에 있는 엔티티까지 조회할 수 있으며, 이를 패치라고 한다.
  # JPA에서는 패치 전략으로 EAGER와 LAZY 2가지를 지원한다.
  # EAGER는 처음부터 JOIN 쿼리를 통해 연관객체를 검색하며, LAZY는 연관관계에 있는 엔티티가 실제로 사용되는 순간 별도의 SELECT를 수행한다.
  jpa:
    # YAML 파일에서 open-in-view를 false로 설정하면, 데이터베이스 연결은 @Service 객체에서 트랜잭션과 같이 관리되기 때문에
    # 웹 애플리케이션에서 LAZY 전략을 사용할 수 없다.
    # open-in-view 설정은 기본이 true인데, 이를 통해 데이터베이스 연결을 @Controller 객체까지 유지시킬 수 있다.
    open-in-view: true
    # database-platform 설정은 JPA가 생성할 SQL을 어떤 DBMS에 최적화할 것인지 결정한다.
    # H2Dialect를 등록하였으므로 H2 Database에 최적화된 SQL이 만들어진다.
    database-platform: org.hibernate.dialect.H2Dialect
    show-sql: true
    hibernate:
      naming:
        # physical-strategy 설정은 엔티티의 변수 이름과 테이블의 컬럼 이름을 동일하게 유지시킨다.
        # 매핑되는 컬럼이름이 언더바로 이어지게, 예를 들어 createDate 변수와 매핑되는 컬럼 이름을 CREATE_DATE로 처리하려면
        # org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy 로 설정한다.
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      # ddl-auto는 테이블에 대한 설정이다. JPA에서 엔티티 클래스는 테이블과 매핑된다.
      # 따라서 엔티티 클래스에 매핑될 테이블이 존재하지 않으면 엔티티 클래스를 참조하여 테이블을 자동으로 생성한다.
      # create 설정의 경우 애플리케이션이 실행될 때마다 테이블을 삭제(DROP)하고 다시 생성(CREATE)한다.
      # 기존 테이블을 재사용 하려면 update로 변경한다.
      ddl-auto: create
      #ddl-auto: update
      use-new-id-generator-mappings: false
    properties:
      hibernate:
        "[format_sql]": true
    